% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{dmdrSparse}
\alias{dmdrSparse}
\title{Distributed Mean Dimension Reduction with Sparse Solutions}
\usage{
dmdrSparse(data, machines, d, maxIter = 100L, tol = 1e-06, useParallel = FALSE)
}
\arguments{
\item{data}{A numeric matrix where the last column represents the response variable, and preceding columns contain predictor variables.}

\item{machines}{An integer specifying the number of machines to distribute computation across.}

\item{d}{An integer indicating the target reduced dimension for parameter estimation.}

\item{maxIter}{An integer specifying the maximum number of iterations (default: 100).}

\item{tol}{A numeric value representing the convergence tolerance for parameter updates (default: 1e-6).}

\item{useParallel}{A logical flag indicating whether to use parallel computation (default: FALSE).}
}
\value{
A numeric matrix containing the final estimated sparse coefficient matrix.
}
\description{
Performs distributed parameter estimation for dimension reduction while enforcing sparsity in the solution.
This method is designed for large-scale data partitioned across multiple machines and incorporates regularization for sparse outputs.
}
\details{
The \code{dmdrSparse} function partitions the input data across the specified number of machines and performs local computations
to estimate sparse scores and Hessian matrices. Regularization is applied to enforce sparsity, making this approach suitable
for high-dimensional data where many predictor variables may not contribute significantly to the response.

The algorithm iteratively aggregates local computations to refine global parameter estimates. Convergence is determined
when the maximum parameter update falls below the specified tolerance (\code{tol}). The final sparse solution enhances model
interpretability and reduces computational overhead. Parallel computation can be enabled with the \code{useParallel} flag for
faster execution on multi-core systems.
}
